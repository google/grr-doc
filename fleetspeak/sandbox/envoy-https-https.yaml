static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 10000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: AUTO
          stat_prefix: ingress_http
          proxy_100_continue: true
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              log_format: {
                "text_format": "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\" PFP: \"%DOWNSTREAM_PEER_FINGERPRINT_256%\" CERT: \"%DOWNSTREAM_PEER_CERT%\" TLS \"%DOWNSTREAM_TLS_VERSION%\"  Issuer \"%DOWNSTREAM_PEER_ISSUER%\"\n"
               }
          route_config:
            name: local_route
            virtual_hosts:
            - name: app
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: fleetspeak-frontend
                  timeout: 0s
                  idle_timeout: 0s
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:   
              '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inlineCode: |
               
                function string.fromhex(str)
                  return (str:gsub('..', function (cc)
                    return string.char(tonumber(cc, 16))
                  end))
                end

                local rtrim = function(str)
                  if str == nil then
                    return
                  end
                  str = string.gsub(str, "=+$", '')
                  return str
                end

                function envoy_on_request(request_handle)
                  local stream = request_handle:streamInfo()
                  local headers = request_handle:headers()  
                  if stream:downstreamSslConnection():peerCertificatePresented() then
                    local peerCertificate = stream:downstreamSslConnection():urlEncodedPemEncodedPeerCertificate()
                    request_handle:logInfo("Peer Certificate: "..peerCertificate)
                    
                    local peerDigest = stream:downstreamSslConnection():sha256PeerCertificateDigest()
                    request_handle:logInfo("Peer Digest: "..peerDigest)
                    
                    local base64Encoded = rtrim(request_handle:base64Escape(peerDigest:fromhex()))
                    request_handle:logInfo("Peer base64: "..base64Encoded)
                    request_handle:headers():add("x-client-cert-hash", base64Encoded)
                  else 
                    request_handle:respond({[":status"] = "403"},"mTLS Required")
                  end
                end 
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          require_client_certificate: true
          common_tls_context:
            validation_context:
              trust_chain_verification: ACCEPT_UNTRUSTED
            tls_certificates:
            # The following self-signed certificate pair is generated using:
            # $ openssl req -x509 -newkey rsa:2048 -keyout a/front-proxy-key.pem -out  a/front-proxy-crt.pem -days 3650 -nodes -subj '/CN=front-envoy'
            #
            # Instead of feeding it as an inline_string, certificate pair can also be fed to Envoy
            # via filename. Reference: https://envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/base.proto#config-core-v3-datasource.
            #
            # Or in a dynamic configuration scenario, certificate pair can be fetched remotely via
            # Secret Discovery Service (SDS). Reference: https://envoyproxy.io/docs/envoy/latest/configuration/security/secret.
            - certificate_chain:
                filename: /etc/cert.pem
              private_key:
                filename: /etc/key.pem

  clusters:
  - name: fleetspeak-frontend
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: fleetspeak-frontend
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: fleetspeak-frontend
                port_value: 9090
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
